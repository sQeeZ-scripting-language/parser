name: sQeeZ-Parser-CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published] 


jobs:
  compile_and_test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,macos-latest,windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y g++ make cmake clang-format python3-pip

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install gcc cmake clang-format python

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y

    - name: Check code style
      shell: bash
      run: |
        function run_clang_format {
          local file=$1
          local result=$(clang-format -style=file -output-replacements-xml "$file")
          local replacements=$(echo "$result" | grep -o "<replacement " | wc -l)
          if [ "$replacements" -ne 0 ]; then
            echo "Code style issues found in file: $file"
            clang-format -style=file "$file" | diff "$file" - || true
            echo "Number of replacements: $replacements"
            return 1
          fi
        }

        echo "Running clang-format..."
        clang_format_failed=0
        for file in $(find . -name '*.cpp' -o -name '*.hpp'); do
          if ! run_clang_format "$file"; then
            clang_format_failed=1
          fi
        done

        if [[ $clang_format_failed -ne 0 ]]; then
          echo "clang-format check failed."
          exit 1
        fi

    - name: Download and extract sQeeZ Lexer (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        REPO="sQeeZ-scripting-language/lexer"
        REPO_DIR="./lexer-lib"
        INCLUDE_DIR="./include/lexer"

        if [ -d "$INCLUDE_DIR" ]; then
          rm -rf "$INCLUDE_DIR"
        fi
        mkdir -p "$INCLUDE_DIR"
        mkdir -p "$REPO_DIR"

        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/$REPO/releases/latest")
        ZIP_URL=$(echo "$LATEST_RELEASE" | grep -o "https://.*sQeeZ-Lexer-macos-.*\\.zip" | head -n 1)

        if [ -z "$ZIP_URL" ]; then
          echo "No matching asset found."
          exit 1
        fi

        TEMP_DIR=$(mktemp -d "/tmp/lexer-XXXXXX")

        curl --retry 5 -L -o "$TEMP_DIR/sQeeZ-Lexer.zip" "$ZIP_URL"
        unzip "$TEMP_DIR/sQeeZ-Lexer.zip" -d "$REPO_DIR"

        mv "$REPO_DIR/"*/libsQeeZ-Lexer-Lib.a "$REPO_DIR/"
        mv "$REPO_DIR/lexer/"* "$INCLUDE_DIR/"

        rm -rf "$REPO_DIR/"*/sQeeZ-Lexer-Node.node
        rm -rf "$REPO_DIR/"*/sQeeZ-Lexer-Exe
        rm -rf "$INCLUDE_DIR/node"
        rm -rf "$TEMP_DIR"

        find "$REPO_DIR" -type d -empty -delete

        echo "Latest files have been downloaded and extracted to $REPO_DIR."

    - name: Download and extract sQeeZ Lexer (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        REPO="sQeeZ-scripting-language/lexer"
        REPO_DIR="./lexer-lib"
        INCLUDE_DIR="./include/lexer"

        if [ -d "$INCLUDE_DIR" ]; then
          rm -rf "$INCLUDE_DIR"
        fi
        mkdir -p "$INCLUDE_DIR"
        mkdir -p "$REPO_DIR"

        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/$REPO/releases/latest")
        ZIP_URL=$(echo "$LATEST_RELEASE" | grep -o "https://.*sQeeZ-Lexer-linux-.*\\.zip" | head -n 1)

        if [ -z "$ZIP_URL" ]; then
          echo "No matching asset found."
          exit 1
        fi

        TEMP_DIR=$(mktemp -d "/tmp/lexer-XXXXXX")

        curl --retry 5 -L -o "$TEMP_DIR/sQeeZ-Lexer.zip" "$ZIP_URL"
        unzip "$TEMP_DIR/sQeeZ-Lexer.zip" -d "$REPO_DIR"

        mv "$REPO_DIR/"*/libsQeeZ-Lexer-Lib.a "$REPO_DIR/"
        mv "$REPO_DIR/lexer/"* "$INCLUDE_DIR/"

        rm -rf "$REPO_DIR/"*/sQeeZ-Lexer-Node.node
        rm -rf "$REPO_DIR/"*/sQeeZ-Lexer-Exe
        rm -rf "$INCLUDE_DIR/node"
        rm -rf "$TEMP_DIR"

        find "$REPO_DIR" -type d -empty -delete

        echo "Latest files have been downloaded and extracted to $REPO_DIR."
        

    - name: Download and extract sQeeZ Lexer (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        REPO="sQeeZ-scripting-language/lexer"
        REPO_DIR="./lexer-lib"
        INCLUDE_DIR="./include/lexer"

        if [ -d "$INCLUDE_DIR" ]; then
          rm -rf "$INCLUDE_DIR"
        fi
        mkdir -p "$INCLUDE_DIR"
        mkdir -p "$REPO_DIR"

        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/$REPO/releases/latest")

        ZIP_URL=$(echo "$LATEST_RELEASE" | grep -o "https://.*sQeeZ-Lexer-windows-.*\\.zip" | head -n 1)

        if [ -z "$ZIP_URL" ]; then
          echo "No matching asset found."
          exit 1
        fi

        TEMP_DIR=$(mktemp -d "/tmp/lexer-XXXXXX")

        curl --retry 5 -L -o "$TEMP_DIR/sQeeZ-Lexer.zip" "$ZIP_URL"
        unzip "$TEMP_DIR/sQeeZ-Lexer.zip" -d "$REPO_DIR"

        mv "$REPO_DIR/"*/sQeeZ-Lexer-Lib.lib "$REPO_DIR/"
        mv "$REPO_DIR/lexer/"* "$INCLUDE_DIR/"

        rm -rf "$REPO_DIR/"*/sQeeZ-Lexer-Node.node
        rm -rf "$REPO_DIR/"*/sQeeZ-Lexer-Exe.exe
        rm -rf "$INCLUDE_DIR/node"
        rm -rf "$TEMP_DIR"

        find "$REPO_DIR" -type d -empty -delete

        echo "Latest files have been downloaded and extracted to $REPO_DIR."

    - name: Build
      shell: bash
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build .

    - name: Run tests
      shell: bash
      run: |
        cd build
        ctest

    - name: Move build artifacts to a temporary directory
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p temp-artifacts
        cp build/libsQeeZ-Parser-Lib.a temp-artifacts/
        cp build/sQeeZ-Parser-Exe temp-artifacts/

    - name: Move build artifacts to a temporary directory (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        New-Item -Path temp-artifacts -ItemType Directory -Force
        if (Test-Path build/Debug/sQeeZ-Parser-Lib.lib) {
          Copy-Item build/Debug/sQeeZ-Parser-Lib.lib -Destination temp-artifacts/
        }
        if (Test-Path build/Debug/sQeeZ-Parser-Exe.exe) {
          Copy-Item build/Debug/sQeeZ-Parser-Exe.exe -Destination temp-artifacts/
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-output-${{ matrix.os }}
        if-no-files-found: error
        path: temp-artifacts/*

  release:
    if: github.event_name == 'push' || github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: compile_and_test
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download build artifacts (Linux)
        uses: actions/download-artifact@v3
        with:
          name: build-output-ubuntu-latest
          path: ./build-output-ubuntu

      - name: Download build artifacts (macOS)
        uses: actions/download-artifact@v3
        with:
          name: build-output-macos-latest
          path: ./build-output-macos

      - name: Download build artifacts (Windows)
        uses: actions/download-artifact@v3
        with:
          name: build-output-windows-latest
          path: ./build-output-windows

      - name: Get the latest tag or fallback to 0.0.1
        id: get_version
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.1")
          echo "Latest tag is: $LATEST_TAG"
          echo "::set-output name=LATEST_TAG::$LATEST_TAG"
  
      - name: Determine release version (tag or latest tag + build number)
        id: determine_version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            # Use the tag version for a release event
            VERSION="${{ github.event.release.tag_name }}"
            IS_DRAFT=false
          else
            # Append build number to the latest tag for non-tag events
            BUILD_NUMBER=${{ github.run_number }}
            VERSION="${{ steps.get_version.outputs.LATEST_TAG }}+${BUILD_NUMBER}"
            IS_DRAFT=true
          fi
          echo "Release version: $VERSION"
          echo "::set-output name=VERSION::$VERSION"
          echo "::set-output name=IS_DRAFT::$IS_DRAFT"

      - name: Create release artifact
        run: |
          mkdir -p release
          mkdir -p parser
          cp -r include/parser/* parser/
          zip -r release/sQeeZ-Parser-linux-${{ github.run_number }}-${{ steps.determine_version.outputs.VERSION }}.zip ./build-output-ubuntu parser
          zip -r release/sQeeZ-Parser-macos-${{ github.run_number }}-${{ steps.determine_version.outputs.VERSION }}.zip ./build-output-macos parser
          zip -r release/sQeeZ-Parser-windows-${{ github.run_number }}-${{ steps.determine_version.outputs.VERSION }}.zip ./build-output-windows parser
          
      - name: Create or Update Tag
        run: |
          TAG="v${{ steps.determine_version.outputs.VERSION }}"
          git tag -f $TAG
          git push origin $TAG --force

      - name: Upload release asset to GitHub
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.determine_version.outputs.VERSION }}
          prerelease: ${{ steps.determine_version.outputs.IS_DRAFT }}
          artifacts: |
            release/sQeeZ-Parser-linux-${{ github.run_number }}-${{ steps.determine_version.outputs.VERSION }}.zip,
            release/sQeeZ-Parser-macos-${{ github.run_number }}-${{ steps.determine_version.outputs.VERSION }}.zip,
            release/sQeeZ-Parser-windows-${{ github.run_number }}-${{ steps.determine_version.outputs.VERSION }}.zip